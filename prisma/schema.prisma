datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  password           String
  name               String?
  verified           Boolean   @default(false)
  verificationToken  String?
  verificationExpiry DateTime?
  resetToken         String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt

  userStores UserStore[]
}

model Store {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userStores    UserStore[]
  categories    Category[]
  menuItems     MenuItem[]
  tables        RestaurantTable[]
  tableSessions TableSession[]
  setting       StoreSetting?

  @@index([name])
}

model UserStore {
  id      Int  @id @default(autoincrement())
  userId  Int
  storeId Int
  role    Role

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
}

model StoreSetting {
  id                Int      @id @default(autoincrement())
  storeId           Int      @unique
  store             Store    @relation(fields: [storeId], references: [id])
  currency          Currency @default(USD)
  vatRate           Decimal? @db.Decimal(4, 3) // Max 99.9%
  serviceChargeRate Decimal? @db.Decimal(4, 3) // Max 99.9%
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  storeId   Int
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  menuItems MenuItem[]

  @@unique([storeId, name])
  @@index([storeId, sortOrder])
}

model MenuItem {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  basePrice   Decimal? @db.Decimal(10, 2)
  imageKey    String?
  categoryId  Int
  storeId     Int
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  category            Category             @relation(fields: [categoryId], references: [id])
  store               Store                @relation(fields: [storeId], references: [id])
  customizationGroups CustomizationGroup[]
  orderChunkItems     OrderChunkItem[]

  @@index([storeId, sortOrder])
}

model CustomizationGroup {
  id                           Int                           @id @default(autoincrement())
  name                         String
  required                     Boolean                       @default(false)
  minSelectable                Int                           @default(0)
  maxSelectable                Int                           @default(1)
  menuItemId                   Int
  customizationOptions         CustomizationOption[]
  orderChunkItemCustomizations OrderChunkItemCustomization[]

  menuItem MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([menuItemId])
}

model CustomizationOption {
  id                           Int                           @id @default(autoincrement())
  name                         String
  additionalPrice              Decimal?                      @db.Decimal(10, 2)
  customizationGroupId         Int
  orderChunkItemCustomizations OrderChunkItemCustomization[]

  customizationGroup CustomizationGroup @relation(fields: [customizationGroupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([customizationGroupId])
}

model RestaurantTable {
  id        Int      @id @default(autoincrement())
  storeId   Int
  number    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  store         Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  tableSessions TableSession[]

  @@index([storeId, number])
}

model TableSession {
  id          Int                @id @default(autoincrement())
  storeId     Int
  tableId     Int
  sessionUuid String             @unique
  status      TableSessionStatus @default(ACTIVE)
  closedAt    DateTime?

  store  Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  table  RestaurantTable @relation(fields: [tableId], references: [id], onDelete: Cascade)
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId, status])
  @@index([createdAt])
}

model Order {
  id             Int         @id @default(autoincrement())
  tableSessionId Int
  status         OrderStatus @default(OPEN)
  paidAt         DateTime?

  tableSession TableSession @relation(fields: [tableSessionId], references: [id])
  chunks       OrderChunk[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([tableSessionId, status])
}

model OrderChunk {
  id      Int         @id @default(autoincrement())
  orderId Int
  status  ChunkStatus @default(PENDING)

  order      Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  chunkItems OrderChunkItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([orderId, status])
}

model OrderChunkItem {
  id           Int      @id @default(autoincrement())
  orderChunkId Int
  menuItemId   Int
  price        Decimal  @db.Decimal(10, 2)
  quantity     Int      @default(1)
  finalPrice   Decimal? @db.Decimal(10, 2)
  notes        String?

  orderChunk     OrderChunk                    @relation(fields: [orderChunkId], references: [id], onDelete: Cascade)
  menuItem       MenuItem                      @relation(fields: [menuItemId], references: [id])
  customizations OrderChunkItemCustomization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([orderChunkId])
}

model OrderChunkItemCustomization {
  id Int @id @default(autoincrement())

  orderChunkItemId      Int
  customizationOptionId Int

  quantity   Int?     @default(1)
  finalPrice Decimal? @db.Decimal(10, 2)

  orderChunkItem      OrderChunkItem      @relation(fields: [orderChunkItemId], references: [id], onDelete: Cascade)
  customizationOption CustomizationOption @relation(fields: [customizationOptionId], references: [id])

  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  CustomizationGroup   CustomizationGroup? @relation(fields: [customizationGroupId], references: [id])
  customizationGroupId Int?

  @@unique([orderChunkItemId, customizationOptionId])
}

enum Role {
  OWNER
  ADMIN
  SALE
  CHEF
}

enum TableSessionStatus {
  ACTIVE
  CLOSED
}

enum OrderStatus {
  OPEN
  PAID
  CANCELLED
}

enum ChunkStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Currency {
  THB // Thai Baht
  MMK // Myanmar Kyat
  USD // US Dollar
  EUR // Euro
  GBP // British Pound
  JPY // Japanese Yen
  CNY // Chinese Yuan
  AUD // Australian Dollar
  CAD // Canadian Dollar
  NZD // New Zealand Dollar
  SGD // Singapore Dollar
  HKD // Hong Kong Dollar
  INR // Indian Rupee
  IDR // Indonesian Rupiah
  PHP // Philippine Peso
  MYR // Malaysian Ringgit
  VND // Vietnamese Dong
  PKR // Pakistani Rupee
  BDT // Bangladeshi Taka
  AED // United Arab Emirates Dirham
  SAR // Saudi Riyal
}

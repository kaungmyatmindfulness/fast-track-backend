datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String    @id @default(uuid(7))
  email              String    @unique
  password           String
  name               String?
  verified           Boolean   @default(false)
  verificationToken  String?
  verificationExpiry DateTime?
  resetToken         String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt

  userStores UserStore[]
}

model Store {
  id        String   @id @default(uuid(7))
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userStores    UserStore[]
  categories    Category[]
  menuItems     MenuItem[]
  tables        RestaurantTable[]
  tableSessions TableSession[]
  information   StoreInformation?
  setting       StoreSetting?

  @@index([slug])
}

model UserStore {
  id      String @id @default(uuid(7))
  userId  String
  storeId String
  role    Role

  user  User  @relation(fields: [userId], references: [id])
  store Store @relation(fields: [storeId], references: [id])

  @@unique([userId, storeId])
}

model StoreInformation {
  id        String   @id @default(uuid(7))
  storeId   String   @unique
  store     Store    @relation(fields: [storeId], references: [id])
  name      String
  logoUrl   String?
  address   String?
  phone     String?
  email     String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model StoreSetting {
  id                String   @id @default(uuid(7))
  storeId           String   @unique
  store             Store    @relation(fields: [storeId], references: [id])
  currency          Currency @default(USD)
  vatRate           Decimal? @default(0.07) @db.Decimal(4, 3)
  serviceChargeRate Decimal? @default(0.0) @db.Decimal(4, 3)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
}

model Category {
  id        String    @id @default(uuid(7))
  name      String
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  sortOrder Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  menuItems MenuItem[]

  @@unique([storeId, name])
  @@index([storeId, sortOrder])
  @@index([deletedAt])
}

model MenuItem {
  id          String    @id @default(uuid(7))
  name        String
  description String?
  basePrice   Decimal   @db.Decimal(10, 2)
  imageUrl    String?
  categoryId  String
  storeId     String
  sortOrder   Int       @default(0)
  isHidden    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?

  category            Category             @relation(fields: [categoryId], references: [id])
  store               Store                @relation(fields: [storeId], references: [id])
  customizationGroups CustomizationGroup[]
  orderChunkItems     OrderChunkItem[]

  @@index([storeId, sortOrder])
  @@index([deletedAt])
}

model CustomizationGroup {
  id                           String                        @id @default(uuid(7))
  name                         String
  minSelectable                Int                           @default(0)
  maxSelectable                Int                           @default(1)
  menuItemId                   String
  customizationOptions         CustomizationOption[]
  orderChunkItemCustomizations OrderChunkItemCustomization[]

  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([menuItemId])
}

model CustomizationOption {
  id                           String                        @id @default(uuid(7))
  name                         String
  additionalPrice              Decimal?                      @db.Decimal(10, 2)
  customizationGroupId         String
  orderChunkItemCustomizations OrderChunkItemCustomization[]

  customizationGroup CustomizationGroup @relation(fields: [customizationGroupId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([customizationGroupId])
}

model RestaurantTable {
  id        String   @id @default(uuid(7))
  storeId   String
  number    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  store         Store          @relation(fields: [storeId], references: [id])
  tableSessions TableSession[]

  @@index([storeId, number])
}

model TableSession {
  id          String             @id @default(uuid(7))
  storeId     String
  tableId     String
  sessionUuid String             @unique
  status      TableSessionStatus @default(ACTIVE)
  closedAt    DateTime?

  store  Store           @relation(fields: [storeId], references: [id])
  table  RestaurantTable @relation(fields: [tableId], references: [id])
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId, status])
  @@index([createdAt])
}

model Order {
  id             String      @id @default(uuid(7))
  tableSessionId String
  status         OrderStatus @default(OPEN)
  paidAt         DateTime?

  subTotal                  Decimal  @default(0) @db.Decimal(10, 2)
  vatRateSnapshot           Decimal? @db.Decimal(4, 3)
  serviceChargeRateSnapshot Decimal? @db.Decimal(4, 3)
  vatAmount                 Decimal  @default(0) @db.Decimal(10, 2)
  serviceChargeAmount       Decimal  @default(0) @db.Decimal(10, 2)
  grandTotal                Decimal  @default(0) @db.Decimal(10, 2)

  tableSession TableSession @relation(fields: [tableSessionId], references: [id], onDelete: Cascade) // Keep Cascade if deleting session deletes orders
  chunks       OrderChunk[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([tableSessionId, status])
}

model OrderChunk {
  id      String      @id @default(uuid(7))
  orderId String
  status  ChunkStatus @default(PENDING)

  order      Order            @relation(fields: [orderId], references: [id])
  chunkItems OrderChunkItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([orderId, status])
}

model OrderChunkItem {
  id           String   @id @default(uuid(7))
  orderChunkId String
  menuItemId   String?
  price        Decimal  @db.Decimal(10, 2)
  quantity     Int      @default(1)
  finalPrice   Decimal? @db.Decimal(10, 2)
  notes        String?

  orderChunk     OrderChunk                    @relation(fields: [orderChunkId], references: [id])
  menuItem       MenuItem?                     @relation(fields: [menuItemId], references: [id])
  customizations OrderChunkItemCustomization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([orderChunkId])
  @@index([menuItemId])
}

model OrderChunkItemCustomization {
  id String @id @default(uuid(7))

  orderChunkItemId      String
  customizationOptionId String

  quantity   Int?     @default(1)
  finalPrice Decimal? @db.Decimal(10, 2)

  orderChunkItem OrderChunkItem @relation(fields: [orderChunkItemId], references: [id])

  customizationOption CustomizationOption @relation(fields: [customizationOptionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  CustomizationGroup   CustomizationGroup? @relation(fields: [customizationGroupId], references: [id])
  customizationGroupId String?

  @@unique([orderChunkItemId, customizationOptionId])
}

// --- Enums remain the same ---
enum Role {
  OWNER
  ADMIN
  CASHIER
  CHEF
}

enum TableSessionStatus {
  ACTIVE
  CLOSED
}

enum OrderStatus {
  OPEN
  PAID
  CANCELLED
}

enum ChunkStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Currency {
  THB
  MMK
  USD
  EUR
  GBP
  JPY
  CNY
  AUD
  CAD
  NZD
  SGD
  HKD
  INR
  IDR
  PHP
  MYR
  VND
  PKR
  BDT
  AED
  SAR
}

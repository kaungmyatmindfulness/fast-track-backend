datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ----------------- USER + SHOP LOGIC -----------------
model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  password           String
  name               String?
  verified           Boolean   @default(false)
  verificationToken  String?
  verificationExpiry DateTime?

  userShops UserShop[]
}

model Shop {
  id      Int     @id @default(autoincrement())
  name    String
  address String?
  phone   String?

  userShops    UserShop[]
  categories   Category[]
  menuItems    MenuItem[]
  tables       RestaurantTable[]
  TableSession TableSession[]
}

model UserShop {
  id     Int  @id @default(autoincrement())
  userId Int
  shopId Int
  role   Role

  user User @relation(fields: [userId], references: [id])
  shop Shop @relation(fields: [shopId], references: [id])

  @@unique([userId, shopId])
}

// ----------------- CATEGORY + MENU ITEM -----------------
model Category {
  id     Int    @id @default(autoincrement())
  name   String
  shopId Int
  shop   Shop   @relation(fields: [shopId], references: [id])

  menuItems MenuItem[]

  // Analytics tip: we can query categories by shop 
  @@index([shopId])
}

model MenuItem {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  basePrice   Float
  imageKey    String?

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])

  shopId Int
  shop   Shop @relation(fields: [shopId], references: [id])

  // Normalized Variation/Size/AddOn
  variations Variation[]
  sizes      Size[]
  addOns     AddOn[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // referencing order usage
  OrderChunkItem OrderChunkItem[]

  // Analytics: we often filter by shop or category
  @@index([shopId])
  @@index([categoryId])
}

// Normalized Variation/Size/AddOn for analytics 
model Variation {
  id         Int      @id @default(autoincrement())
  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  name       String
  extraPrice Float  @default(0)

  @@index([menuItemId])
}

model Size {
  id         Int      @id @default(autoincrement())
  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  name       String
  extraPrice Float  @default(0)

  @@index([menuItemId])
}

model AddOn {
  id         Int      @id @default(autoincrement())
  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  name       String
  extraPrice Float  @default(0)

  @@index([menuItemId])
}

// ----------------- TABLE SESSION + ORDER -----------------
model RestaurantTable {
  id     Int  @id @default(autoincrement())
  shopId Int
  shop   Shop @relation(fields: [shopId], references: [id])

  number String?

  tableSessions TableSession[]

  // we might do queries by shop + table number
  @@index([shopId])
}

model TableSession {
  id     Int  @id @default(autoincrement())
  shopId Int
  shop   Shop @relation(fields: [shopId], references: [id])

  tableId Int
  table   RestaurantTable @relation(fields: [tableId], references: [id])

  sessionUuid String             @unique
  status      TableSessionStatus @default(ACTIVE)
  createdAt   DateTime           @default(now())
  closedAt    DateTime?

  // One-to-one with Order
  order Order?

  // Analytics: often we query sessions by shop + status
  @@index([shopId, status])
}

model Order {
  id             Int          @id @default(autoincrement())
  tableSessionId Int          @unique
  tableSession   TableSession @relation(fields: [tableSessionId], references: [id])

  status    OrderStatus @default(OPEN) // "open", "paid"
  createdAt DateTime    @default(now())
  paidAt    DateTime?

  // multiple chunks in one order
  chunks OrderChunk[]

  // Possibly index status if we do status-based queries
  // or combine tableSessionId + status
  @@index([tableSessionId, status])
}

model OrderChunk {
  id      Int   @id @default(autoincrement())
  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  // e.g. "pending", "in-progress", "done" for KDS
  status    ChunkStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt

  chunkItems OrderChunkItem[]

  // If we do KDS queries by order + status
  @@index([orderId, status])
}

model OrderChunkItem {
  id           Int        @id @default(autoincrement())
  orderChunkId Int
  orderChunk   OrderChunk @relation(fields: [orderChunkId], references: [id])

  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  price      Float
  quantity   Int    @default(1)
  finalPrice Float? // final = price * quantity or advanced logic

  chosenVariationId Int?
  chosenSizeId      Int?
  chosenAddOns      Json?

  notes     String?
  createdAt DateTime @default(now())

  @@index([orderChunkId])
  @@index([menuItemId])
}

enum Role {
  OWNER
  ADMIN
  SALE
  CHEF
}

enum TableSessionStatus {
  ACTIVE
  CLOSED
}

enum OrderStatus {
  OPEN
  PAID
}

enum ChunkStatus {
  PENDING
  IN_PROGRESS
  DONE
}

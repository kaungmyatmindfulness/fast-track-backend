datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  password           String
  name               String?
  verified           Boolean   @default(false)
  verificationToken  String?
  verificationExpiry DateTime?

  userShops UserShop[]
}

model Shop {
  id           Int               @id @default(autoincrement())
  name         String
  address      String?
  phone        String?
  userShops    UserShop[]
  categories   Category[]
  menuItems    MenuItem[]
  tables       RestaurantTable[]
  TableSession TableSession[]
}

model UserShop {
  id     Int  @id @default(autoincrement())
  userId Int
  shopId Int
  role   Role

  user User @relation(fields: [userId], references: [id])
  shop Shop @relation(fields: [shopId], references: [id])

  @@unique([userId, shopId])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  shopId Int
  shop   Shop @relation(fields: [shopId], references: [id])

  menuItems MenuItem[]
}

model MenuItem {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  basePrice    Float
  imageKey     String?
  categoryId   Int?
  category     Category? @relation(fields: [categoryId], references: [id])
  // store arrays of variations, sizes, addOnOptions as JSON
  variations   Json?
  sizes        Json?
  addOnOptions Json?

  shopId Int
  shop   Shop @relation(fields: [shopId], references: [id])

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  OrderChunkItem OrderChunkItem[]
}

model TableSession {
  id     Int  @id @default(autoincrement())
  shopId Int
  shop   Shop @relation(fields: [shopId], references: [id])

  tableId Int
  table   RestaurantTable @relation(fields: [tableId], references: [id])

  sessionUuid String    @unique
  status      String    @default("active") // "active", "closed"
  createdAt   DateTime  @default(now())
  closedAt    DateTime?

  // One-to-one with Order
  order Order?
}

model RestaurantTable {
  id     Int  @id @default(autoincrement())
  shopId Int
  shop   Shop @relation(fields: [shopId], references: [id])

  number String? // e.g. "Table #1"

  tableSessions TableSession[]
}

model Order {
  id             Int          @id @default(autoincrement())
  tableSessionId Int          @unique
  tableSession   TableSession @relation(fields: [tableSessionId], references: [id])

  status    String    @default("open") // "open", "paid"
  createdAt DateTime  @default(now())
  paidAt    DateTime?

  // multiple chunks in one order
  chunks OrderChunk[]
}

model OrderChunk {
  id      Int   @id @default(autoincrement())
  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  // e.g. "pending", "in-progress", "done" for KDS
  status String @default("pending")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chunkItems OrderChunkItem[]
}

model OrderChunkItem {
  id           Int        @id @default(autoincrement())
  orderChunkId Int
  orderChunk   OrderChunk @relation(fields: [orderChunkId], references: [id])

  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  price      Float
  quantity   Int    @default(1)
  finalPrice Float? // final price = price * quantity

  variant Json?
  size    Json?
  addOns  Json?

  // Customerâ€™s notes for special instructions
  notes String?

  createdAt DateTime @default(now())
}

enum Role {
  OWNER
  ADMIN
  SALE
  CHEF
}
